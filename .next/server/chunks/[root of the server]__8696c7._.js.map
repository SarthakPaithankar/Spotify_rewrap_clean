{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/node/app/app/lib/route.js"],"sourcesContent":["import pg from 'pg';\n\n// Database configuration\nconst dbConfig = {\n    user: process.env.POSTGRES_USER,\n    host: process.env.POSTGRES_HOST,\n    password: process.env.POSTGRES_PASSWORD,\n    database: process.env.POSTGRES_DB,\n    port: process.env.POSTGRES_PORT,\n};\n\n// Create a connection pool\nconst db = new pg.Pool(dbConfig);\n\nexport default async function query(text, params) {\n    let client;\n    try {\n        // Connect to the database\n        client = await db.connect();\n        console.log('Database connected!');\n\n        // Execute query and log results\n        const result = await client.query(text, params);\n        console.log('Query Result:', result.rows); // Logs query output\n\n        // Return rows\n        return result.rows;\n    } catch (error) {\n        console.error('Query Error:', error.message); // Log query errors\n        throw error; // Rethrow the error to handle it in API route\n    } finally {\n        if (client) {\n            client.release(); // Release client to the pool\n            console.log('Database connection released.');\n        }\n    }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,yBAAyB;AACzB,MAAM,WAAW;IACb,MAAM,QAAQ,GAAG,CAAC,aAAa;IAC/B,MAAM,QAAQ,GAAG,CAAC,aAAa;IAC/B,UAAU,QAAQ,GAAG,CAAC,iBAAiB;IACvC,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,MAAM,QAAQ,GAAG,CAAC,aAAa;AACnC;AAEA,2BAA2B;AAC3B,MAAM,KAAK,IAAI,6FAAA,CAAA,UAAE,CAAC,IAAI,CAAC;AAER,eAAe,MAAM,IAAI,EAAE,MAAM;IAC5C,IAAI;IACJ,IAAI;QACA,0BAA0B;QAC1B,SAAS,MAAM,GAAG,OAAO;QACzB,QAAQ,GAAG,CAAC;QAEZ,gCAAgC;QAChC,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,MAAM;QACxC,QAAQ,GAAG,CAAC,iBAAiB,OAAO,IAAI,GAAG,oBAAoB;QAE/D,cAAc;QACd,OAAO,OAAO,IAAI;IACtB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gBAAgB,MAAM,OAAO,GAAG,mBAAmB;QACjE,MAAM,OAAO,8CAA8C;IAC/D,SAAU;QACN,IAAI,QAAQ;YACR,OAAO,OAAO,IAAI,6BAA6B;YAC/C,QAAQ,GAAG,CAAC;QAChB;IACJ;AACJ"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///home/node/app/app/api/login/route.js"],"sourcesContent":["import query from '../../lib/route';\n\nexport async function POST(req) {\n    try {\n        // Parse request body\n        const body = await req.json();\n        const { email, password } = body;\n\n        console.log('Request Body:', { email, password });\n\n        // Check if email and password are provided\n        if (!email || !password) {\n            console.log('Missing credentials');\n            return Response.json({ error: 'Missing credentials' }, { status: 400 });\n        }\n\n        // Execute database query\n        console.log('Executing query...');\n        const result = await query('SELECT * FROM users WHERE email = $1', [email]);\n        console.log('Query Result:', result);\n\n        // Check if user exists\n        if (!result || result.length === 0) {\n            console.log('User not found');\n            return Response.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        const user = result[0]; // Get first row\n        console.log('Fetched User:', user);\n        console.log(password, user.password)\n        // Check password (plain text comparison for now)\n        if (password == user.password) {\n            console.log('Password matched!');\n            return Response.json({ message: 'Login successful', user }, { status: 200 });\n        } else {\n            console.log('Password mismatch');\n            return Response.json({ error: 'Invalid credentials' }, { status: 401 });\n        }\n    } catch (error) {\n        console.error('Server Error:', error); // Log any unexpected server errors\n        return Response.json({ error: 'Server error' }, { status: 500 });\n    }\n}\n\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,GAAG;IAC1B,IAAI;QACA,qBAAqB;QACrB,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE5B,QAAQ,GAAG,CAAC,iBAAiB;YAAE;YAAO;QAAS;QAE/C,2CAA2C;QAC3C,IAAI,CAAC,SAAS,CAAC,UAAU;YACrB,QAAQ,GAAG,CAAC;YACZ,OAAO,SAAS,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,yBAAyB;QACzB,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,CAAA,GAAA,qHAAA,CAAA,UAAK,AAAD,EAAE,wCAAwC;YAAC;SAAM;QAC1E,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,uBAAuB;QACvB,IAAI,CAAC,UAAU,OAAO,MAAM,KAAK,GAAG;YAChC,QAAQ,GAAG,CAAC;YACZ,OAAO,SAAS,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,OAAO,MAAM,CAAC,EAAE,EAAE,gBAAgB;QACxC,QAAQ,GAAG,CAAC,iBAAiB;QAC7B,QAAQ,GAAG,CAAC,UAAU,KAAK,QAAQ;QACnC,iDAAiD;QACjD,IAAI,YAAY,KAAK,QAAQ,EAAE;YAC3B,QAAQ,GAAG,CAAC;YACZ,OAAO,SAAS,IAAI,CAAC;gBAAE,SAAS;gBAAoB;YAAK,GAAG;gBAAE,QAAQ;YAAI;QAC9E,OAAO;YACH,QAAQ,GAAG,CAAC;YACZ,OAAO,SAAS,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QACzE;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iBAAiB,QAAQ,mCAAmC;QAC1E,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IAClE;AACJ"}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}